# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: "A very simple command for demonstration purposes."
    steps:
      - run: echo {$CIRCLE_WORKFLOW_ID}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Print hello"
          command: "echo hello"

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Print world"
          command: "echo world"

  print_env_var:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo $REPO_OWNER

  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  job_with_command:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      # - say-hello
      # - print_hello
      # - print_world:
      #     requires: [print_hello]
      # - print_env_var
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - job_with_command
